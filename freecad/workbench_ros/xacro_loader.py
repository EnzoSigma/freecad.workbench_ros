"""Read a xacro file defining macros.

The difference with .urdf_loader.UrdfLoader is that xacro files that only
define macros can be loaded. A full-feature xacro file can then be generated by
specifying a macro to use and its parameters.

"""

from __future__ import annotations

from copy import copy
from pathlib import Path
from typing import Any, Optional
from xml.dom.minidom import Document
from xml.dom.minidom import parse
from xml.dom.minidom import parseString

from urdf_parser_py.urdf import Robot

import xacro
from xacro import Table
from xacro import eval_all
from xacro import process_doc

from .ros_utils import get_package_and_file


class Xacro:

    def __init__(self, xml_doc: Document, xacro_file: str = ''):
        self.input_xml_doc: Document = xml_doc
        self.input_xacro_file = xacro_file
        self.macros = Table()
        self.symbols = Table()

        tmp_output_xml_doc = copy(self.input_xml_doc)

        # Initialize xacro, required when using `eval_all()` directly (as
        # opposed to through calling `process_doc()`).
        if not xacro.filestack:
            if hasattr(xacro, 'init_stacks'):
                # Humble and newer.
                xacro.init_stacks(None)
            else:
                xacro.restore_filestack([None])
        eval_all(tmp_output_xml_doc.documentElement, self.macros, self.symbols)

    def get_macro_names(self):
        return list(self.macros.keys())

    def get_parameters(self, macro: str):
        if macro not in self.macros:
            raise RuntimeError(f'Macro "{macro}" not'
                               ' defined in the xacro file')
        return self.macros[macro].params

    def to_xml(self,
               robot_name: str,
               macro: str = '',
               parameters: Optional[dict[str, Any]] = None) -> Document:
        """Return the minidom Document of the xacro."""
        if not macro:
            # As-is xacro or URDF, except the robot name.
            out_xml = copy(self.input_xml_doc)
            # Replace the robot name.
            out_xml.firstChild.setAttribute('name', robot_name)
            return out_xml
        if macro not in self.macros:
            raise RuntimeError(f'Macro "{macro}" not'
                               ' defined in the xacro file')
        parameters = {} if parameters is None else parameters
        out_xml = Document()
        robot = out_xml.appendChild(out_xml.createElement('robot'))
        robot.setAttribute('name', robot_name)
        robot.setAttribute('xmlns:xacro', 'http://ros.org/wiki/xacro')
        include = robot.appendChild(out_xml.createElement('xacro:include'))
        pkg, xacro_file = get_package_and_file(self.input_xacro_file)
        include.setAttribute('filename', f'$(find {pkg})/{xacro_file}')
        use = robot.appendChild(out_xml.createElement(f'xacro:{macro}'))
        for k, v in parameters.items():
            use.setAttribute(k, str(v))
        return out_xml

    def to_string(self,
                  robot_name: str,
                  macro: str = '',
                  parameters: Optional[dict[str, Any]] = None) -> str:
        """Return the string of the xacro."""
        doc = self.to_xml(robot_name, macro, parameters)
        return doc.toxml()

    def to_pretty_xml(self,
                      robot_name: str,
                      macro: str = '',
                      parameters: Optional[dict[str, Any]] = None,
                      indent='\t',
                      newl='\n') -> str:
        """Return the string of the xacro for pretty-printing."""
        doc = self.to_xml(robot_name, macro, parameters)
        return doc.toprettyxml(indent, newl)

    def to_urdf_xml(self,
                    robot_name: str,
                    macro: str = '',
                    parameters: Optional[dict[str, Any]] = None) -> Document:
        """Return the minidom Document of the generated URDF."""
        # Now a xacro, later a URDF.
        out_xml = self.to_xml(robot_name, macro, parameters)
        process_doc(out_xml)
        return out_xml

    def to_urdf_string(self,
                       robot_name: str,
                       macro: str = '',
                       parameters: Optional[dict[str, Any]] = None) -> str:
        """Return the string of the generated URDF."""
        doc = self.to_urdf_xml(robot_name, macro, parameters)
        return doc.toxml()

    def to_urdf_pretty_xml(self,
                           robot_name: str,
                           macro: str = '',
                           parameters: Optional[dict[str, Any]] = None,
                           indent='\t',
                           newl='\n') -> str:
        """Return the string of the xacro for pretty-printing."""
        doc = self.to_urdf_xml(robot_name, macro, parameters)
        return doc.toprettyxml(indent, newl)


class XacroLoader:
    """Generate a urdf_parser_py.urdf.Robot from different sources."""

    def __init__(self):
        pass

    @classmethod
    def load_from_file(cls, filename: [str | Path]) -> Xacro:
        """Load from a xacro file."""
        filename = str(Path(filename).expanduser())
        return Xacro(parse(filename), filename)

    @classmethod
    def load_from_string(cls, description: [str | bytes]) -> Xacro:
        """Load from an xml string."""
        return Xacro(parseString(description))

    @classmethod
    def load_from_parameter_server(cls,
                                   key: str = 'robot_description') -> Xacro:
        """Load from ROS parameter server."""
        return Xacro(parseString(Robot.from_parameter_server(key).to_xml_string()))
